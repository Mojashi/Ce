
/*
https://www.nikoli.co.jp/ja/puzzles/yajilin/
のトップにある問題をmain内で設定してる
サイクルのスタート地点が違うと別の解として扱われるので今のところ唯一解チェックとかはできない
こたえ
*-*-*-*-*-*-*-*
|+-+ B +-+-+-+|
*|*|* *|* * *|*
|+ + A + B A +|
*|*|* *|* * *|*
|+ +-+ +-+ B +|
*|* *|* *|* *|*
|+ B +-+-+ +-+|
*|* * * * *|* *
|+ A B A B + B|
*|* * * * *|* *
|+ +-+-+-+ +-+|
*|*|* * *|* *|*
|+-+ A B +-+-+|
*-*-*-*-*-*-*-*
*/

import "stl/integer.ce"
import "stl/boolop.ce"

struct Yajilin:(SysInt H, SysInt W, SysInt SIZE){
    Bool block[H][W], arrow[H][W], blank[H][W], next[H][W][4];
    Integer:(SIZE) num[H][W];

    Init{
        for(i, H*W){
            [-arrow[i/H][i%H]];
        }
    }
    Prop{
        for(i, H*W){
            SysInt x,y;
            Bool iZero;
            y := i/H; x := i%H;
            iZero := num[y][x]:==toInteger(0,SIZE);
            [-num[y][x].overflow];

            for(s,4){ for(t,s+1,4){//nextはたかだかひとつ
                [-next[y][x][s], -next[y][x][t]];
            }}
            if(y :< H-1){
                if[block[y][x]]{ [-block[y + 1][x]]; }
            }
            if(x :< W-1){
                if[block[y][x]]{ [-block[y][x + 1]]; }
            }

            Bool jZero;
            for(j, i + 1, H*W){
                jZero := num[j/W][j%W]:==toInteger(0,SIZE);
                [-blank[y][x], -blank[j/W][j%W],-iZero,-jZero];
            }
            
            Bool existNext, existBefo;
            [-existNext];[-existBefo];
            if(y :> 0){
                existNext := or(existNext, next[y][x][0]);
                existBefo := or(existBefo, next[y-1][x][2]);
                if[next[y-1][x][2]]{
                    [iZero, num[y][x] :== num[y-1][x] + toInteger(1, SIZE)];
                }    
            }
            if(y :< H-1){
                existNext := or(existNext, next[y][x][2]);
                existBefo := or(existBefo, next[y+1][x][0]);
                if[next[y+1][x][0]]{
                    [iZero, num[y][x] :== num[y+1][x] + toInteger(1, SIZE)];
                }    
            }
            if(x :> 0){   
                existNext := or(existNext, next[y][x][3]);
                existBefo := or(existBefo, next[y][x-1][1]);
                if[next[y][x-1][1]]{
                    [iZero, num[y][x] :== num[y][x-1] + toInteger(1, SIZE)];
                }    
            }
            if(x :< W-1){ 
                existNext := or(existNext, next[y][x][1]);
                existBefo := or(existBefo, next[y][x+1][3]);
                if[next[y][x+1][3]]{
                    [iZero, num[y][x] :== num[y][x+1] + toInteger(1, SIZE)];
                }    
            }

            if[blank[y][x]] { 
                [existBefo];
                [existNext];
            }
            if[-blank[y][x]]{
                [-existNext];
                [-existBefo];
                num[y][x] = toInteger(0,SIZE);
            }
            [blank[y][x], block[y][x], arrow[y][x]];
            [-blank[y][x], -block[y][x]];
            [-blank[y][x], -arrow[y][x]];
            [-arrow[y][x], -block[y][x]];
        }
    }

    // n:numOfBlocks dir:arrow direction 0=>up 1=>right 2=>down 3=>left
    void setArrow(SysInt y, SysInt x, SysInt n, SysInt dir){
        Bool nbool;
        arrow[y][x] := nbool;
        [arrow[y][x]];
        Integer:(SIZE) count;
        count.getInteger(0);
        if(dir :== 0){for(i,0,y){
            count := count + block[i][x];
        }}
        if(dir :== 1){for(i,x,W){
            count := count + block[y][i];
        }}
        if(dir :== 2){for(i,y,H){
            count := count + block[i][x];
        }}
        if(dir :== 3){for(i,0,x){
            count := count + block[y][i];
        }}
        count = toInteger(n, SIZE);
    }
}

Yajilin:(7,7,6) yaji;

void main(){
    yaji.setArrow(1,2,1,0);
    yaji.setArrow(1,5,1,3);
    yaji.setArrow(4,1,1,0);
    yaji.setArrow(4,3,2,1);
    yaji.setArrow(6,2,0,3);
}
