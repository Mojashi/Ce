Bool and(Bool a, Bool b){
    Bool ret;
    [-a,-b,ret];
    [a,-ret];
    [b,-ret];
    return ret;
}
Bool or(Bool a, Bool b){
    Bool ret;
    [a,b,-ret];
    [-a,ret];
    [-b,ret];
    return ret;
}
Bool xor(Bool a, Bool b){
    Bool ret;
    [a,b,-ret];
    [-a,-b,-ret];
    [-a,b,ret];
    [a,-b,ret];
    return ret;
}

struct SC{
    Bool s, c;
}
    SC halfadder(Bool a, Bool b){
        SC ret;
        ret.s := xor(a,b);
        ret.c := and(a,b);
        return ret;
    }

    SC fulladder(Bool a, Bool b, Bool c){
        SC ret;
        [-a,-b,-c,ret.s];
        [-a,b,c,ret.s];
        [a,b,-c,ret.s];
        [a,-b,c,ret.s];
        [a,b,c, -ret.s];
        [-a,-b,c,-ret.s];
        [-a,b,-c,-ret.s];
        [a,-b,-c,-ret.s];
        
        [-b,-c,ret.c];
        [-a,-c,ret.c];
        [-b,-a,ret.c];
        [b,c,-ret.c];
        [a,c,-ret.c];
        [b,a,-ret.c];
        return ret;
    }

struct Integer:(SysInt SIZE){
    Bool val[SIZE];
    Bool overflow;
    Integer lshift(){
        Integer:(SIZE) ret;
        for(i,SIZE - 1){
            ret.val[i + 1] := val[i];
        }
        [-ret.val[0]];
        ret.overflow := or(val[SIZE - 1], overflow);
        return ret;
    }
    Integer operator*(Integer a, Bool b){
        Integer:(a.SIZE) ret;
        for(i,a.SIZE){
            ret.val[i] := and(a.val[i],b);
        }
        ret.overflow := and(a.overflow,b);
        return ret;
    }
    Integer operator*(Integer a, Integer b){
        Integer:(a.SIZE) ret;
        Integer:(a.SIZE) buf, buff;
        buf := a;
        ret.getInteger(0);
        for(i,b.SIZE){
            buff := buf * b.val[i];
            ret := ret + buff;
            buf:=buf.lshift();
        }
        return ret;
    }
    Integer operator+(Integer a, Integer b){
        Bool carry;
        Integer:(a.SIZE) ret;
        [-carry];
        for(i,SIZE){
            SC sc;
            sc := fulladder(a.val[i],b.val[i],carry);
            carry := sc.c;
            ret.val[i] := sc.s;
        }
        ret.overflow := or(or(carry,a.overflow),b.overflow);
        return ret;
    }
    Integer operator+(Integer a, Bool b){
        Bool carry;
        Integer:(a.SIZE) ret;
        carry := b;
        for(i,a.SIZE){
            SC sc;
            sc := halfadder(a.val[i],carry);
            carry := sc.c;
            ret.val[i] := sc.s;
        }
        ret.overflow := or(carry,a.overflow);
        return ret;
    }
    Bool operator==(Integer a, Integer b){
        Bool ret;
        [-ret];
        for(i,SIZE){
            ret := or(ret,xor(a.val[i],b.val[i]));
        }
        ret := or(ret,xor(a.overflow,b.overflow));
        return -ret;
    }
    
    void getInteger(SysInt n){
        for(i,SIZE){
            val[i] := getBit(n,i);
        }
        [-overflow];
    }
}

Integer toInteger(SysInt n, SysInt size){
    Integer:(size) ret;
    for(i,size){
        ret.val[i] := getBit(n,i);
    }
    [-ret.overflow];
    return ret;
}
Integer:(13) x,y,z;
void main(){
    SysInt a;
    a := 13;
    Integer:(a) aa;
    z := aa;
    y.getInteger(68);
    y = x * x * x + x;
}